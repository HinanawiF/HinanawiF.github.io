<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hinanawi_Field</title>
  
  <subtitle>testing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hinanawif.github.io/"/>
  <updated>2019-02-06T17:47:37.274Z</updated>
  <id>https://hinanawif.github.io/</id>
  
  <author>
    <name>Hinanawi_Feng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>题解P1019单词接龙</title>
    <link href="https://hinanawif.github.io/2019/02/07/word/"/>
    <id>https://hinanawif.github.io/2019/02/07/word/</id>
    <published>2019-02-06T17:44:32.000Z</published>
    <updated>2019-02-06T17:47:37.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先在题意上可能有些误解。"><a href="#首先在题意上可能有些误解。" class="headerlink" title="首先在题意上可能有些误解。"></a>首先在题意上可能有些误解。</h2><ul><li>两个单词合并时，合并部分取的是<strong>最小重叠部分</strong></li><li><strong>相邻的两部分不能存在包含关系</strong>就是说如果存在包含关系，就不能标记为使用过。</li><li>每个单词最多出现两次.</li></ul><p>(其实也就是读题问题。这些都是我所犯的错误，希望大家能注意一下)</p><p>好了。然后是解题思路。</p><p>首先是预处理，用yc[i][j]来存储 第i个单词 后连接 第j个单词 的 最小重叠部分（mt函数）</p><p>后来预处理完了之后就是深搜:</p><p>先从第一个到最后一个单词看一看哪个单词是指定字母为开头的，作为深搜的第一个单词，同时标记使用过一次（vis[i]++)</p><p>然后继续搜吧。</p><p>以下是代码。 mt函数可能有点难理解。拿草纸模拟一下就能很直观知道在干什么了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//单词数 </span></span><br><span class="line"><span class="built_in">string</span> tr[<span class="number">30</span>];<span class="comment">//存储字符串 </span></span><br><span class="line"><span class="keyword">int</span> yc[<span class="number">30</span>][<span class="number">30</span>];<span class="comment">//两个字母的最小重叠部分 </span></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">30</span>];<span class="comment">//判断单词使用频率. </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//mt函数，返回x单词后连接一个y单词的最小重叠部分 </span></span><br><span class="line">    <span class="keyword">bool</span> pp=<span class="literal">true</span>; </span><br><span class="line">    <span class="keyword">int</span> ky=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=tr[x].size()<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--)&#123;<span class="comment">//从x单词尾部向前看看最小重叠部分是从哪里开始的，以为因为是倒着来，所以保证是最小的 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> kx=k;kx&lt;tr[x].size();kx++)&#123;/ </span><br><span class="line">            <span class="keyword">if</span>(tr[x][kx]!=tr[y][ky++])&#123;</span><br><span class="line">                pp=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pp==<span class="literal">true</span>)&#123;<span class="comment">//如果说当前以k为开头的前一个单词后缀 ,是后面单词的前缀，就马上返回重叠部分。（tr[x].size()-k是找出来的规律）</span></span><br><span class="line">            <span class="keyword">return</span> tr[x].size()-k;        &#125; </span><br><span class="line">        ky=<span class="number">0</span>;</span><br><span class="line">        pp=<span class="literal">true</span>;<span class="comment">//不行就继续</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//可能这里有点难理解。可以手动模拟一下</span></span><br><span class="line"><span class="keyword">char</span> ch;<span class="comment">//开头字母 </span></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">-1</span>;<span class="comment">//答案 </span></span><br><span class="line"><span class="keyword">int</span> an=<span class="number">0</span>;<span class="comment">//每次搜到的当前最长串 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;<span class="comment">//p为尾部单词编号(p的后缀就是“龙”的后缀，因为p已经连接到”龙“后面了)</span></span><br><span class="line">    <span class="keyword">bool</span> jx=<span class="literal">false</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[j]&gt;=<span class="number">2</span>) <span class="keyword">continue</span>;<span class="comment">//使用了两次就跳过 </span></span><br><span class="line">        <span class="keyword">if</span>(yc[p][j]==<span class="number">0</span>) <span class="keyword">continue</span>;<span class="comment">//两单词之间没有重合部分就跳过 </span></span><br><span class="line">        <span class="keyword">if</span>(yc[p][j]==tr[p].size() || yc[p][j]==tr[j].size()) <span class="keyword">continue</span>;<span class="comment">//两者存在包含关系就跳过 </span></span><br><span class="line">        an+=tr[j].size()-yc[p][j];<span class="comment">//两单词合并再减去最小重合部分 </span></span><br><span class="line">        vis[j]++;<span class="comment">//使用了一次</span></span><br><span class="line">        jx=<span class="literal">true</span>;<span class="comment">//标记一下当前已经成功匹配到一个可以连接的部分 </span></span><br><span class="line">        dfs(j); <span class="comment">//接上去</span></span><br><span class="line">        an-=tr[j].size()-yc[p][j];<span class="comment">//回溯，就要再减回去那一部分长度 </span></span><br><span class="line">        vis[j]--;<span class="comment">//回溯,使用-- </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(jx==<span class="literal">false</span>)&#123;<span class="comment">//jx==false说明不能再找到任何一个单词可以相连了 </span></span><br><span class="line">        ans=max(ans,an);<span class="comment">//更新ans </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;tr[i];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ch; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            yc[i][j]=mt(i,j); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//预处理yc数组。yc[i][j]就表示，i单词后连接一个j单词的最小重叠部分 </span></span><br><span class="line">    <span class="comment">//比如 i表示at,j表示att. yc[i][j]就为2 但是yc[j][i]就为0.</span></span><br><span class="line">    <span class="comment">//预处理是一个关键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//从头到尾看一下有没有以指定开头字母为开头的单词 </span></span><br><span class="line">        <span class="keyword">if</span>(tr[i][<span class="number">0</span>]==ch)&#123;<span class="comment">//如果有，就以当前单词为基准进行搜索。 </span></span><br><span class="line">            vis[i]++;<span class="comment">//使用过一次 </span></span><br><span class="line">            an=tr[i].size();<span class="comment">//更新当前串长度 </span></span><br><span class="line">            dfs(i);<span class="comment">//接上</span></span><br><span class="line">            vis[i]=<span class="number">0</span>;<span class="comment">//消除影响 </span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外思路是zcy dalao所提供的。在做题的时候又发现了许多新的问题，所以贴出来既是给自己警示也分享给大家。</p><p>###2017.10.27老物 Luogu第一篇题解</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;首先在题意上可能有些误解。&quot;&gt;&lt;a href=&quot;#首先在题意上可能有些误解。&quot; class=&quot;headerlink&quot; title=&quot;首先在题意上可能有些误解。&quot;&gt;&lt;/a&gt;首先在题意上可能有些误解。&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;两个单词合并时，合并部分取的是&lt;stro
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018年末总结</title>
    <link href="https://hinanawif.github.io/2019/02/06/1/"/>
    <id>https://hinanawif.github.io/2019/02/06/1/</id>
    <published>2019-02-06T00:00:00.000Z</published>
    <updated>2019-02-06T17:43:59.642Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2018年过去了。"><a href="#2018年过去了。" class="headerlink" title="2018年过去了。"></a>2018年过去了。</h4><p>想想过去的一年里真是坎坷不断呢。</p><p>去年的这个时候也许比此时快乐多了，也比此时更加无忧无虑</p><p>去年上半年总体来说还算比较安稳(文化课文化课文化课),<del>对未来充满信心那种</del></p><p>再往后大事应该就是中考了，不过像我们这样没有升学压力的，，也就是玩玩而已。</p><p>有个让我无比头疼的是实验，我祈祷千万不要抽签抽到生物。</p><p>然后是生物</p><p>emmm 那好歹别是观察小鱼尾鳍就行。跟你讲那鱼活蹦乱跳的我根本按不住</p><p>然后就是小鱼尾鳍。</p><p>wtf 只能硬着头皮上了，然后实验的时候似乎小鱼特别给力，很老实，最后……我好像拿了A？（小声</p><p><img src="https://i.loli.net/2019/02/07/5c5b14be34926.jpg" alt=""></p><p>最后中考总评.体育是B就算了，语文也是B????</p><p><img src="https://i.loli.net/2019/02/07/5c5b14be6bdbf.jpg" alt="???"></p><p>妈耶.我们语文老师带了我三年结果就考她的科炸了会不会有点对不起她。（愧疚</p><p>然后在学校的烈日下等了几天……</p><p>然后就是无比刺激的初三暑假，<del>时间最长（个屁</del></p><p>21天外出集训全安排上了。 济南-&gt;昌邑-&gt;北京</p><p>去济南的第一堂课好像还和某dalao一起迟到了（</p><p>昌邑洗澡不给热水差评</p><p>去北京除了知识之外最大的收获就是会坐了地铁！话说培训最后一天是中午11点结束，然后我妈给我订的11点多车票</p><p>“那不是来不及了吗？”同学比我都着急.</p><p>我笑了笑：“订的晚上11点”</p><p><img src="https://i.loli.net/2019/02/07/5c5b14be6b070.jpg" alt=""></p><p>要不是有这张夜车票我也不会提着比我都沉的行李走在天安门广场上。<del>我觉得我可能是整个广场唯一一个带着这么多行李的傻子</del></p><p>暑假嗖的一下就过去了</p><p>开学了。然后遇到了个非常让我不舒服的班主任<del>土拨鼠</del></p><p>似乎是要打压我们学竞赛的？？？</p><p><img src="https://i.loli.net/2019/02/07/5c5b14bf2329e.jpg" alt=""></p><p>于是我就停了一个月的课23333</p><p>然后从11月份开始就是我的噩梦</p><p>NOIP心态爆炸，然后炸得惨不忍睹</p><p><img src="https://i.loli.net/2019/02/07/5c5b14bf1522e.jpg" alt=""></p><p>等我回去，班主任：“哟，这不大神回来了吗，考得咋样”</p><p>“不咋样”</p><p>然后我就去考期中考试了</p><p>emmm全班倒数第二（不是倒数第一还挺刺激的</p><p>然后段考班主任给我定个目标。”级部前五十“</p><p>这不要了我的命吗</p><p><img src="https://i.loli.net/2019/02/07/5c5b19d347719.jpg" alt=""></p><p>成绩出来 ，级部九十</p><p>班主任：“这次不行，下次三十”</p><p>又一次段考，三十三</p><p>班主任：“我给你定个目标你哪次都达不到，你爸有多着急你知道吗，你这竞赛干脆别学了？”</p><p>我不知道我爸多着急，我只知道他又找到理由坑我学竞赛这件事了</p><p>最后就是期末考试了。</p><p>（其实经过期中炸 NOIP炸我心态已经波澜不惊了</p><p>考前班主任把我拉办公室里：“状态咋样，能进前二十不”</p><p>我：“……（不是说好的30吗”</p><p>期末考试……语文英语被我们班第一拉了三四十分！</p><p>wtf这让我活吗。 但是可算苟到了二十六</p><p>快放假那两天。我蹦蹦跳跳跑到办公室里：“老师我能去机房了不”</p><p>“你文化课这么差你不补补？” </p><p>“……”</p><p><img src="https://i.loli.net/2019/02/07/5c5b1c33c109f.jpg" alt=""></p><p>转眼寒假也过了一大半了，马上就要开学了。</p><p>我相信2018年是我这有生以来最艰难的一年，NOIP没能拿一等，这是一生的遗憾</p><p>但也是成长最大的一年，明白了如何去面对苦难，认识了许多可爱活泼又牛逼的同学,Oier和其它朋友们。</p><p>2019，请让我丢掉2018的遗憾。</p><p>2019年等待我的是什么呢？</p><p>我不知道，但是我知道在面前的路会更加坎坷。</p><p><strong>不停止前进，为了自己希望的生活……</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;2018年过去了。&quot;&gt;&lt;a href=&quot;#2018年过去了。&quot; class=&quot;headerlink&quot; title=&quot;2018年过去了。&quot;&gt;&lt;/a&gt;2018年过去了。&lt;/h4&gt;&lt;p&gt;想想过去的一年里真是坎坷不断呢。&lt;/p&gt;
&lt;p&gt;去年的这个时候也许比此时快乐多了，也
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hinanawi_Feng的博客开通了~</title>
    <link href="https://hinanawif.github.io/2019/02/03/begin/"/>
    <id>https://hinanawif.github.io/2019/02/03/begin/</id>
    <published>2019-02-02T16:00:00.000Z</published>
    <updated>2019-02-06T17:01:03.936Z</updated>
    
    <content type="html"><![CDATA[<p><strong>2019.2.3 我的博客正式开通了~</strong></p><p><strong>欢迎大家来捧场，开始这里也许会有些冷清</strong></p><p>请多多关注和支持哦~</p><p>QQ:1637757679</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;2019.2.3 我的博客正式开通了~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎大家来捧场，开始这里也许会有些冷清&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请多多关注和支持哦~&lt;/p&gt;
&lt;p&gt;QQ:1637757679&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
